#!/usr/bin/env python

import os
import sys
import warnings

import numpy as np
import pandas as pd

import serverAI.ML_SARIMA_Forecasting as ia
from serverAI.IA_final_dataframe import Forecasting
from serverAI.ML_SARIMA_Forecasting import getData


class Style:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


'''
Main program for calling methods for prediction and build objects.
'''
if __name__ == '__main__':
    if len(sys.argv) == 2:
        print("The model used for this solution uses a learning process. Please \nfill in the CSV file names in the "
              "following order:\nnumber of clients and bandwidth. \n" + Style.UNDERLINE + "Usage" + Style.ENDC + " : python3 -m ["
                                                                                                                 "nbClientCSV] ["
                                                                                                                 "bandwidthCSV].")
        sys.exit(1)
    try:
        arg1 = sys.argv[1]
        arg2 = sys.argv[2]
        arg3 = sys.argv[3]
    except IndexError:
        print(Style.FAIL + "Argument expected for the -m option \nUsage: python3 " + os.path.basename(
            __file__) + " [CSV_file1] ["
                        "CSV_file2] [1 for IHM]/[0 for prompt only]\nTry `python -h' "
                        "for more information." + Style.ENDC)
        sys.exit(1)
    print("============Artificial Intelligence SARIMA Model============\n")
    path = os.getcwd()
    repn = os.path.basename(path)
    warnings.filterwarnings("ignore")
    # SARIMA = #, #, p, d ,q, P, D, Q, seasonal_length
    # Retrieve data from logs files
    day = "Wednesday"  # define what data for what day
    # For the execution from the IDE
    # y = pd.DataFrame(getData("../data/log_lundi.csv"))
    # y2 = pd.DataFrame(getData("../data/log_lundi_bw.csv"))

    # For the execution from the terminal
    y = pd.DataFrame(getData("data/log_mercredi.csv"))
    y2 = pd.DataFrame(getData("data/log_mercredi_bw.csv"))

    data_nbClient = ia.build_forecast(y, 120, 1, 1, 3, 1, 1, 3, 24, "nbCLient", day)
    data_bandwidth = ia.build_forecast(y2, 120, 0, 1, 1, 0, 1, 1, 24, "Bandwidth_Mo.s", day)
    data_per_day = np.array_split(data_nbClient, 5)
    data_per_day2 = np.array_split(data_bandwidth, 5)
    df_client = pd.DataFrame(abs(data_per_day[4]))
    df_bandwidth = pd.DataFrame(abs(data_per_day2[4]))
    df_client.to_csv('data/estimated_client_' + day + '.csv')
    df_bandwidth.to_csv('data/estimated_bandwidth_' + day + '.csv')
    print(Style.OKBLUE + "Estimated data found for CLIENT :" + str(abs(data_per_day[4])) + Style.ENDC)
    print(Style.HEADER + "Estimated data found for BANDWIDTH :" + str(abs(data_per_day2[4])) + Style.ENDC)
    # hyperparameters_optimization(y2, 2)

    forecast = Forecasting(6, 8, 20)
    forecast.add(abs(data_per_day2[4]), abs(data_per_day[4]), day)
    forecast.predict(day)
    forecast.graphics(day)

    print(Style.BOLD + Style.OKGREEN + "All images and data generated by the artificial intelligence are saved in the "
                                       "following folder : : " + path + repn + Style.ENDC + "\n")
    # print(forecast.daysD["Monday"].get_frct_nbClient(13))  # +1h
    # print(forecast.daysD[day].toString())
    if arg3 == "1":
        os.system('python3 ihm.py')
    else:
        sys.exit(1)