import \
    mysql.connector  # pip search mysql-connector | grep --color mysql-connector-pytho | pip install mysql-connector-python (get the last one)
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pandas.plotting import register_matplotlib_converters
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller

mydb = mysql.connector.connect(
    host="localhost",
    user="l1k1",
    passwd="raccoon",
    database="projetM1"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT time, count(*) as NUM FROM csv_data GROUP BY time LIMIT 500")
result_set = mycursor.fetchall()
time=[]
user=[]
dt=[]
for row in result_set:
    dt.append(row)
    #print("%s, %s" % (row[0], row[1]))
    #user.append(row[1])
    #time.append(row[0])

dttime = pd.DataFrame(dt)
dttime.to_csv('../data/new_.csv', index=False, header=True)
print(dttime)

register_matplotlib_converters()
df = pd.read_csv('../data/new_.csv', parse_dates=['0'], index_col=['0'])
plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
print(df.head())
plt.xlabel('Date')
plt.ylabel('Nombre d\'utilisateur')
plt.plot(df)
plt.show()

# graphics method
plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
rolling_mean = df.rolling(window=12).mean()
rolling_std = df.rolling(window=12).std()
plt.plot(df, color='blue', label='Origine')
plt.plot(rolling_mean, color='red', label='Moyenne mobile')
plt.plot(rolling_std, color='black', label='Ecart-type mobile')
plt.legend(loc='best')
plt.title('Moyenne et Ecart-type mobiles')
plt.show()

# ADF method
result = adfuller(df['1'])

print('Statistiques ADF : {}'.format(result[0]))
print('p-value : {}'.format(result[1]))
print('Valeurs Critiques :')
for key, value in result[4].items():
    print('\t{}: {}'.format(key, value))

# Convert réduction
df_log = np.log(df)
plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
plt.plot(df_log)
plt.show()

#########################################################################################
def get_stationarity(timeseries):
    # Statistiques mobiles
    rolling_mean = timeseries.rolling(window=12).mean()
    rolling_std = timeseries.rolling(window=12).std()

    # tracé statistiques mobiles
    plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
    original = plt.plot(timeseries, color='blue', label='Origine')
    mean = plt.plot(rolling_mean, color='red', label='Moyenne Mobile')
    std = plt.plot(rolling_std, color='black', label='Ecart-type Mobile')
    plt.legend(loc='best')
    plt.title('Moyenne et écart-type Mobiles')
    plt.show(block=False)

    # Test Dickey–Fuller :
    result = adfuller(timeseries['1'])
    print('Statistiques ADF : {}'.format(result[0]))
    print('p-value : {}'.format(result[1]))
    print('Valeurs Critiques :')
    for key, value in result[4].items():
        print('\t{}: {}'.format(key, value))



rolling_mean = df_log.rolling(window=12).mean()
df_log_minus_mean = df_log - rolling_mean
df_log_minus_mean.dropna(inplace=True)
get_stationarity(df_log_minus_mean)

rolling_mean_exp_decay = df_log.ewm(halflife=12, min_periods=0, adjust=True).mean()
df_log_exp_decay = df_log - rolling_mean_exp_decay
df_log_exp_decay.dropna(inplace=True)
get_stationarity(df_log_exp_decay)

df_log_shift = df_log - df_log.shift()
df_log_shift.dropna(inplace=True)
get_stationarity(df_log_shift)


decomposition = seasonal_decompose(df_log, period=52)
model = ARIMA(df_log, order=(2,1,2))
results = model.fit(disp=-1)
plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
plt.plot(df_log_shift)
plt.plot(results.fittedvalues, color='red')
plt.show()

fig = results.plot_predict(1, 900)
plt.figure(num=None, figsize=(19, 7), dpi=80, facecolor='w', edgecolor='k')
plt.show()
'''
#df = pd.read_csv('../data/airline_passengers.csv', parse_dates=['Month'], index_col=['Month'])
#df.head()
#print(df)

#y.plot(x=0,y=1,kind='line', linewidth=3,figsize=(19,7))
#plt.title('Observations', fontsize=22, fontweight="bold")
#plt.xlabel('Temps (h)', fontsize=18)
#plt.ylabel('Nombre d\'utilisateurs', fontsize=18)

#plt.tight_layout()
plt.xlabel('Date')
plt.ylabel('Nombre de passagers aériens')
plt.plot(df)
plt.show()'''